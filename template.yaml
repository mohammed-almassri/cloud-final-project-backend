AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Authentication server with authorizer function

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  JWTSecret:
    Type: String
    NoEcho: true
  DynamoDBTableName:
    Type: String
    Default: users-table
  S3BucketName:
    Type: String
    Description: S3 bucket for profile images

Globals:
  Function:
    Runtime: nodejs18.x
    MemorySize: 256
    Timeout: 30
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        JWT_SECRET: !Ref JWTSecret
        DYNAMODB_TABLE: !Ref DynamoDBTableName
        S3_BUCKET_NAME: !Ref S3BucketName

Resources:
  DevApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Environment
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
        AllowOrigins:
          - 'https://d2g7e9sf0x8kns.cloudfront.net'
          - 'https://d2dg46q8mb4ycg.cloudfront.net'
          - 'http://localhost:3000'  # Also allowing localhost for development
        MaxAge: 300
        AllowCredentials: true
      # Auth:
      #   DefaultAuthorizer: LambdaTokenAuthorizer
      #   Authorizers:
      #     LambdaTokenAuthorizer:
      #       FunctionArn: !GetAtt AuthorizerFunction.Arn
      #       FunctionInvokeRole: !GetAtt AuthorizerRole.Arn
      #       AuthorizerPayloadFormatVersion: "2.0"
      #       Identity:
      #         Headers:
      #           - Authorization

  AuthServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.handler
      CodeUri: ./
      MemorySize: 1024
      Timeout: 30
      # AutoPublishAlias: live
      # ProvisionedConcurrencyConfig:
        # ProvisionedConcurrentExecutions: 2
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:PutObjectAcl
              Resource:
                - !Sub '${ProfileImagesBucket.Arn}/*'
      Events:
        Signup:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevApi
            Path: /signup
            Method: POST
            # Auth:
            #   Authorizer: NONE
        Login:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevApi
            Path: /login
            Method: POST
            # Auth:
            #   Authorizer: NONE
        GetUploadUrl:           # New endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref DevApi
            Path: /upload-url
            Method: GET
        SaveProfileUrl:         # New endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref DevApi
            Path: /profile-url
            Method: PUT
        UpdateProfileImage:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevApi
            Path: /profile-image
            Method: PUT
            # Auth:
            #   Authorizer: LambdaTokenAuthorizer

  # AuthorizerFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/authorizer.handler
  #     CodeUri: ./
  #     Environment:
  #       Variables:
  #         JWT_SECRET: !Ref JWTSecret

  # AuthorizerRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: apigateway.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

# Rest of the template remains the same...
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ProfileImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter  # This enables ACLs
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ["*"]
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  ProfileImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProfileImagesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub '${ProfileImagesBucket.Arn}/*'

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${DevApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
  UserTableArn:
    Description: ARN of the DynamoDB users table
    Value: !GetAtt UsersTable.Arn
  ProfileImagesBucketName:
    Description: Name of the S3 bucket for profile images
    Value: !Ref ProfileImagesBucket